name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install kubectl
      uses: azure/setup-kubectl@v1
      id: install

    - name: Install Civo CLI
      run: |
        curl -sL https://civo.com/get | sh
        civo version
        civo apikey save github_actions_key ${{ secrets.CIVO_API_KEY }}
        civo apikey current github_actions_key

    - name: Setup configuration
      run: |
        echo ${{ secrets.ENV_FILE_BASE64 }} | base64 -d > ./app.env
        # Downloading cluster configuration
        civo kube config ${{ secrets.CLUSTER_NAME }} --save --overwrite --region FRA1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fiber-pscale:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    - name: Deploy to CIVO
      run: |
        APP_NAME="fiber-pscale"
        NAMESPACE="fiber-pscale"

        sed -i "/namespace-name/c\\  name: ${NAMESPACE}" devops/namespace.yaml
        kubectl apply -f ./devops/namespace.yaml

        # Encode the config in base64 and set it as an environment variable
        # then decode it to use for the build
        echo ${{ secrets.ENV_FILE_BASE64 }} | base64 -d > ./app.env

        # Update configmap if it exists, create one if it does not
        if [[ $(kubectl get configmap env -n ${NAMESPACE} --ignore-not-found | wc -c) -ne 0 ]]; then
          kubectl create configmap env --from-file=app.env -o yaml --dry-run=client -n ${NAMESPACE} | kubectl replace -f - -n ${NAMESPACE}
        else
          kubectl create configmap env --from-file=app.env -n ${NAMESPACE}
        fi

        # Create deployment
        kubectl apply -f ./devops/deployment.yaml -n ${NAMESPACE}

        # Create service
        kubectl apply -f ./devops/service.yaml -n ${NAMESPACE}

        # Create ingress
        kubectl apply -f ./devops/ingress.yaml -n ${NAMESPACE}

        # Restart deployment
        kubectl rollout restart deployment ${APP_NAME} -n ${NAMESPACE}

        # Rollback if deployment fails
        if ! kubectl rollout status deployment --timeout 3m ${APP_NAME} -n ${NAMESPACE}; then
          echo "App deployment failed, rolling back to previous deployment..."
          kubectl rollout undo deployment ${APP_NAME} -n ${NAMESPACE}
          exit 1
        fi
